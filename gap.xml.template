<?xml version="1.0" encoding="ISO-8859-15"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--
	This file is automatically generated using CreateKateSyntaxHighlight
	-->


<language name="GAP@@@NAME@@@" section="Scientific" extensions="*.gd;*.gi;*.g" mimetype="text/gap" version="0.2" kateversion="2.4" author="Jose Joao Morais" license="GPL">

	<highlighting>

		<!-- Reserved keywords in GAP -->

		<list name="controlstatements">
			<item> break </item>
			<item> continue </item>
			<item> do </item>
			<item> elif </item>
			<item> else </item>
			<item> then </item>
		</list>

		<list name="logicoperators">
			<item> and </item>
			<item> fail </item>
			<item> false </item>
			<item> not </item>
			<item> or </item>
			<item> true </item>
		</list>

		<list name="gapkeywords">
			<item> in </item>
			<item> local </item>
			<item> rec </item>
			<item> return </item>
		</list>

		<list name="mathoperators">
			<item> mod </item>
		</list>

                <list name="builtinfunctions">
@@@MHIGHLIGHT_ITEMS@@@
		</list>


		<contexts>

			<context name="Top_Level" attribute="Normal Text" lineEndContext="#stay">
				<DetectSpaces />

				<IncludeRules context="Strings" />
				<IncludeRules context="Code_Folding" />
				<IncludeRules context="Two Char Operators" />

				<DetectChar   context="Commentary"   char="#" />

				<AnyChar      context="#stay"        attribute="Operator1"          String="!%*+,/;=>|;-:&lt;&gt;\^" />



				<keyword      context="#stay"        attribute="Builtin Functions"  String="builtinfunctions" />
				<keyword      context="#stay"        attribute="Control Statements" String="controlstatements" />
				<keyword      context="#stay"        attribute="GAP Keywords"       String="gapkeywords" />
				<keyword      context="#stay"        attribute="Logic Operators"    String="logicoperators" />
				<keyword      context="#stay"        attribute="Math Operators"    String="mathoperators" />

				<RegExpr      context="#stay"        attribute="Number"             String="(\d+(\.\d+)?|\.\d+)([eE][+-]?\d+)?[ij]?" />
				<RegExpr      context="#stay"        attribute="Variable"           String="[a-zA-Z]\w*" />
			</context>


			<context name="Commentary" attribute="Commentary" lineEndContext="#pop">
			</context>


			<context name="Code_Folding" attribute="Normal Text" lineEndContext="Top_Level">
				<RegExpr context="#stay" attribute="Control Statements" String="\b(for)\b" beginRegion="do_block" />
				<RegExpr context="#stay" attribute="Control Statements" String="\b(while)\b" beginRegion="do_block" />
				<RegExpr context="#stay" attribute="Control Statements" String="\b(od)\b" endRegion="do_block" />

				<RegExpr context="#stay" attribute="Control Statements" String="\b(repeat)\b" beginRegion="repeat_block" />
				<RegExpr context="#stay" attribute="Control Statements" String="\b(until)\b" endRegion="repeat_block" />

				<RegExpr context="#stay" attribute="Control Statements" String="\b(if)\b" beginRegion="if_block" />
				<RegExpr context="#stay" attribute="Control Statements" String="\b(fi)\b" endRegion="if_block" />

				<RegExpr context="#stay" attribute="Function" String="\b(function)\b" beginRegion="func_block" />
				<RegExpr context="#stay" attribute="Function" String="\b(end)\b" endRegion="func_block" />
			</context>



			<context name="Two Char Operators" attribute="Normal Text" lineEndContext="#stay">
				<StringDetect context="#stay" attribute="Operator2" String=".."/>
				<StringDetect context="#stay" attribute="Operator2" String="!."/>
				<StringDetect context="#stay" attribute="Operator2" String=":="/>
				<StringDetect context="#stay" attribute="Operator2" String="-&gt;"/>
				<StringDetect context="#stay" attribute="Operator2" String="&lt;="/>
				<StringDetect context="#stay" attribute="Operator2" String="&gt;="/>
				<StringDetect context="#stay" attribute="Operator2" String="&lt;&gt;"/>
			</context>


			<context name="Strings"    attribute="Strings" lineEndContext="#stay">
				<RegExpr context="#stay" attribute="String" String="'([^'\\]|''|\\'|\\[^'])*'(?=[^']|$)" />
				<RegExpr context="#stay" attribute="Incomplete String" String="'([^']|''|\\')*" />
				<RegExpr context="#stay" attribute="String" String="&quot;([^&quot;\\]|&quot;&quot;|\\&quot;|\\[^&quot;])*&quot;(?=[^&quot;]|$)" />
				<RegExpr context="#stay" attribute="Incomplete String" String="&quot;([^&quot;]|&quot;&quot;|\\&quot;)*" />
			</context>
		</contexts>


		<!-- ======== Item Data ======== -->
		<itemDatas>
			<itemData name="Builtin Functions"   defStyleNum="dsFunction" color="#0000ff" italic="1" bold="1" selColor="#00ff00" />
			<itemData name="Commentary"          defStyleNum="dsComment"  color="#009900" italic="1" />
			<itemData name="Control Statements"  defStyleNum="dsKeyword"  color="#FF0900" />
			<itemData name="Function"            defStyleNum="dsKeyword"  color="#FF6827" />
			<itemData name="GAP Keywords"        defStyleNum="dsKeyword"  color="#FF6827" />
			<itemData name="Incomplete String"   defStyleNum="dsChar"     color="#a020f0" />
			<itemData name="Logic Operators"     defStyleNum="dsKeyword"  color="#5127B2" />
			<itemData name="Math Operators"      defStyleNum="dsKeyword"  color="#663333" />
			<itemData name="Normal Text"         defStyleNum="dsNormal"   />
			<itemData name="Number"              defStyleNum="dsFloat"    />
			<itemData name="Operator1"           defStyleNum="dsNormal"   color="#2313D4" />
			<itemData name="Operator2"           defStyleNum="dsNormal"   color="#663300" bold="1" />
			<itemData name="String"              defStyleNum="dsString"   />
			<itemData name="Variable"            defStyleNum="dsNormal"   />
		</itemDatas>

	</highlighting>

	<general>
		<comments>
			<comment name="singleLine" start="#" />
		</comments>
		<keywords casesensitive="true" />
	</general>

</language>
